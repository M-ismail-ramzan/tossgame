{"version":3,"sources":["Player1/Player1.js","Player2/Player2.js","Newgame/Newgame.js","App.js","serviceWorker.js","index.js"],"names":["Player1","props","_useState","useState","_useState2","Object","slicedToArray","message","setmessage","react_default","a","createElement","className","onClick","sciccor1","paper1","rock1","console","log","Player2","message2","setmessage2","_useState3","_useState4","winner","setwinner","sciccor2","paper2","rock2","alert","Newgame","onclick","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","starting","NewgameHandler","window","location","reload","state","src_Newgame_Newgame","src_Player1_Player1","src_Player2_Player2","Component","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d225bee2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Player1=(props) => {\r\n    const [message , setmessage]=useState();\r\n\r\n   const RockHandler=(props)=>{\r\n        props.sciccor1 = false;\r\n        props.paper1 = false;\r\n        props.rock1 = true;\r\n       if(props.rock1){\r\n        setmessage(\"You Selected Rock\");\r\n           console.log(\"checking the rock by clicking it\")\r\n       }\r\n   }\r\n\r\n   const ScissorHandler=(props)=>{\r\n    props.rock1 = false;\r\n    props.paper1 = false;\r\n    props.sciccor1 = true;\r\n   if(props.sciccor1){\r\n    setmessage(\"You Selected Sciccor\");\r\n           console.log(\"checking the sciccor by clicking it\")\r\n   }\r\n}\r\n\r\nconst PaperHandler=(props)=>{\r\n    props.sciccor1 = false;\r\n    props.rock1 = false;\r\n    props.paper1 = true;\r\n    if(props.paper1){\r\n        setmessage(\"You Selected Paper\");\r\n        console.log(\"checking the paper by clicking it\")\r\n       }\r\n}\r\n\r\nconst newgame=(props)=>{\r\n    props.starting();\r\n}\r\n  return (\r\n      <div>\r\n    <div className=\"align-middle h-100\">\r\n    <div>\r\n      <h1 className=\"text-center\">Player One</h1>\r\n      <h5 className=\"text-center text-danger mt-3\">{message}</h5>\r\n    </div>\r\n    <div className=\"d-flex justify-content-center mt-5\">\r\n        \r\n        <button className=\" ml-2 btn-primary\"  onClick={RockHandler}>Rock</button>\r\n        <button className=\" ml-2 btn-primary\"  onClick={ScissorHandler}>Scissor</button>\r\n        <button className=\" ml-2 btn-primary\"  onClick={PaperHandler}>Paper</button>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Player1;\r\n","import React, {useState} from 'react';\r\n\r\nconst Player2=(props) => {\r\n    const [message2 , setmessage2]=useState();\r\n    const [winner , setwinner]=useState();\r\n\r\n   const RockHandler=(props)=>{\r\n       props.sciccor2=false\r\n       props.paper2=false\r\n       props.rock2=true\r\n\r\n       //If first person Select Rock and Second Also Select Rock then it will be tie\r\n       if(props.rock2 && props.rock1){\r\n           console.log(\"first person Select Rock and Second Also Select Rock then it will be tie \");\r\n           setwinner(\"IT's Tie\")\r\n           setmessage2(\"You Selected Rock\");\r\n\r\n       }\r\n       //If first person select Scissor and second person select Rock then Rock will win\r\n       else if(props.rock2 && props.sciccor1)\r\n       {\r\n        setmessage2(\"You Selected Rock\");\r\n        setwinner(\"Player Two Win\")\r\n           console.log(\"If first person select Scissor and second person select Rock then Rock will win\")\r\n       }\r\n        //If first person select Paper and second person select Rock then Paper will win\r\n       else if(props.rock2 && props.paper1)\r\n       {\r\n        setmessage2(\"You Selected Rock\");\r\n        setwinner(\"Player One Win\")\r\n           console.log(\"If first person select Paper and second person select Rock then Paper will win\")\r\n       }\r\n      else\r\n       {\r\n        alert(\"Its Player One Turn\")    \r\n       }\r\n   }\r\n\r\n   const ScissorHandler=(props)=>{\r\n    props.rock2=false\r\n    props.paper2=false\r\n    props.sciccor2=true\r\n\r\n    //If first person select Sciccor and second person select Sciccor as well then It is TIE\r\n    if(props.sciccor2 && props.sciccor1){\r\n        setmessage2(\"You Selected Scissor\");\r\n        setwinner(\"IT's Tie\")\r\n        console.log(\"If first person select Sciccor and second person select Sciccor as well then It is TIE\")\r\n    }\r\n    else if(props.sciccor2 && props.rock1){\r\n        setmessage2(\"You Selected Scissor\");\r\n        setwinner(\"Player One Win\")\r\n        console.log(\"If first person select rock and second person select Sciccor then it is rock wins\")\r\n    }\r\n    else if(props.sciccor2 && props.paper1){\r\n        setmessage2(\"You Selected Scissor\");\r\n        setwinner(\"Player Two Win\")\r\n        console.log(\"If first person select paper and second person select Sciccor then Sciccor Wins\")\r\n    }\r\n    else\r\n       {\r\n        alert(\"Its Player One Turn\")    \r\n       }\r\n}\r\n\r\nconst PaperHandler=(props)=>{\r\n    props.rock2=false\r\n    props.sciccor2=false\r\n    props.paper2=true\r\n\r\n    if(props.paper2 && props.rock1){\r\n        setmessage2(\"You Selected Paper\");\r\n        setwinner(\"Player Two Win\")\r\n        console.log(\"if second person selects the paper and first person select the rock then paper win\")\r\n    }\r\n    else if(props.paper2 && props.sciccor1){\r\n        setmessage2(\"You Selected Paper\");\r\n        setwinner(\"Player One Win\")\r\n        console.log(\"if second person selects the paper and first person select the sciccor then sciccor win\")\r\n    }\r\n    else if(props.paper2 && props.paper1){\r\n        setmessage2(\"You Selected Paper\");\r\n        setwinner(\"IT's Tie\")\r\n        console.log(\"if second person selects the paper and first person also select paper then its TIE\")\r\n    }\r\n    else\r\n       {\r\n        alert(\"Its Player One Turn\")    \r\n       }    \r\n      }\r\n  return (\r\n      <div>\r\n    <div>\r\n        <h3 className=\"text-center text-success mb-3 mt-3\">{winner}</h3>\r\n      <h1 className=\"text-center\">Player Two</h1>\r\n      <h5 className=\"text-center text-danger mt-3\">{message2}</h5>\r\n    </div>\r\n    <div className=\"d-flex justify-content-center mt-5\">\r\n        <button className=\"ml-2 btn-primary\"  onClick={RockHandler}>Rock</button>\r\n        <button className=\" ml-2 btn-primary\" onClick={ScissorHandler}>Sciccor</button>\r\n        <button className=\"ml-2 btn-primary\" onClick={PaperHandler}>Paper</button>\r\n    </div>\r\n    </div>\r\n  )\r\n  }\r\nexport default Player2;","import React from 'react';\r\n\r\nconst Newgame=(props) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <button className=\"mt-5 btn-primary\" onClick={props.onclick}>New Game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Newgame;\r\n","import React, { Component } from 'react';\nimport \"./central.css\";\nimport Player1 from './Player1/Player1';\nimport Player2 from \"./Player2/Player2\";\nimport Newgame from \"./Newgame/Newgame\";\n\nexport default class App extends Component {\n  constructor(){\n    super();\n      this.state=this.starting();\n  } \n\n  starting=()=>({\n    \n        rock1 : false,\n        sciccor1 : false,\n        paper1 : false,\n        rock2 : false,\n        sciccor2 : false,\n        paper2 : false\n      \n  })\n     NewgameHandler=()=>{\n      window.location.reload(true);\n     }\n\n  render() {\n    return (\n      <div className=\"container central\">\n        <Newgame onclick={this.NewgameHandler}/>\n          <Player1 rock1={this.state.rock1} sciccor1={this.state.sciccor1} paper1={this.state.paper1}/>\n          <Player2 rock2={this.state.rock2} sciccor2={this.state.sciccor2} paper2={this.state.paper2}/>\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}